(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{249:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(9),a=(n(0),n(283)),i={id:"converter",title:"Value Converter",sidebar_label:"Value Converter"},c={id:"version-5.0.12/usages/mapping-configuration/for-member/converter",isDocsHomePage:!1,title:"Value Converter",description:"In some cases, you might have some logic to map from one type to another that you might reuse across the application. For example,",source:"@site/versioned_docs/version-5.0.12/usages/mapping-configuration/for-member/converter.md",permalink:"/docs/5.0.12/usages/mapping-configuration/for-member/converter",editUrl:"https://github.com/nartc/mapper/edit/master/automapper-docusaurus/versioned_docs/version-5.0.12/usages/mapping-configuration/for-member/converter.md",version:"5.0.12",sidebar_label:"Value Converter",sidebar:"version-5.0.12/docs",previous:{title:"MapWith",permalink:"/docs/5.0.12/usages/mapping-configuration/for-member/map-with"},next:{title:"Value Resolver",permalink:"/docs/5.0.12/usages/mapping-configuration/for-member/resolver"},latestVersionMainDocPermalink:"/docs/introduction/why"},p=[],s={rightToc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In some cases, you might have some logic to map from one ",Object(a.b)("inlineCode",{parentName:"p"},"type")," to another that you might reuse across the application. For example,\nyou want to map from ",Object(a.b)("inlineCode",{parentName:"p"},"string")," to ",Object(a.b)("inlineCode",{parentName:"p"},"Date")," with some common logic that makes sense and might get used a lot in your application, you can\nturn to a ",Object(a.b)("inlineCode",{parentName:"p"},"ValueConverter")," to achieve this."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ValueConverter")," is a class that implements ",Object(a.b)("inlineCode",{parentName:"p"},"Converter")," interface. ",Object(a.b)("inlineCode",{parentName:"p"},"Converter")," requires a ",Object(a.b)("inlineCode",{parentName:"p"},"convert()")," function\nand also takes in two ",Object(a.b)("inlineCode",{parentName:"p"},"type arguments"),": ",Object(a.b)("inlineCode",{parentName:"p"},"TConvertSource")," and ",Object(a.b)("inlineCode",{parentName:"p"},"TConvertDestination")," which annotates the type of the source value and the destination value of the converter."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"interface Converter<TConvertSource, TConvertDestination> {\n  convert(source: TConvertSource): TConvertDestination;\n}\n")),Object(a.b)("p",null,"A simple ",Object(a.b)("inlineCode",{parentName:"p"},"StringDateConverter")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"class StringDateConverter implements Converter<string, Date> {\n  convert(source: string): Date {\n    // handle validation here if you like\n    return new Date(source);\n  }\n}\n")),Object(a.b)("p",null,"Once you have the ",Object(a.b)("inlineCode",{parentName:"p"},"ValueConverter")," ready, call ",Object(a.b)("inlineCode",{parentName:"p"},"convertUsing()")," to use the ",Object(a.b)("inlineCode",{parentName:"p"},"ValueConverter"),". You'll get type-inference from the ",Object(a.b)("inlineCode",{parentName:"p"},"Converter"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),'Mapper.createMap(User, UserVm).forMember(\n  dest => dest.birthday,\n  opts =>\n    opts.convertUsing(new StringDateConverter(), src => src.someDateString) // <-- the selector needs to return a value of type "string" because of the StringDateConverter type\n);\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Can you just use ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/5.0.12/usages/mapping-configuration/for-member/map-from"}),"MapFrom")," instead? Absolutely yes, but a ",Object(a.b)("inlineCode",{parentName:"p"},"Converter")," might help you to separate the concern more if you choose to.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"convertUsing()")," will set the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/5.0.12/guides/basic-concept#mappingtransformation"}),"TransformationType")," to ",Object(a.b)("inlineCode",{parentName:"p"},"ConvertUsing"),"."))}l.isMDXComponent=!0},283:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,d=u["".concat(i,".").concat(b)]||u[b]||m[b]||a;return n?o.a.createElement(d,c(c({ref:t},s),{},{components:n})):o.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);